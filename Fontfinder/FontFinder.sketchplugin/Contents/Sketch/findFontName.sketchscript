var onRun = function (context) {

    var doc = context.document;
    var page = doc.currentPage();
    var switchOfSearch = 0;
    var includedFontName = [];
    var selectingFontName = [];
    var userInterface;
    var SELECT, READY_TO_SEARCH, CANCELLED, NOT_READY;


    initialise(context);
    userInterfaceLoop();


    function initialise(context) {
        SELECT = 1000;
        READY_TO_SEARCH = true;
        CANCELLED = false;
        NOT_READY = null;

        // Get font names
        featureSearchFontName();
    }


    function userInterfaceLoop() {

        var uiResponse = NOT_READY;

        while (uiResponse === NOT_READY) {

            // Create the interface
            var modal = createUserInterface();

            // Show it and process the form
            uiResponse = processButtonClick(modal, modal.runModal());

            // Process the response
            switch (uiResponse) {

                // Cancelled
                case NOT_READY:
                uiResponse = CANCELLED;
                break;

                // Let's go
                case READY_TO_SEARCH:
                break;

                // Cancelled
                case CANCELLED:
                break;
            }
        }
    }


    function createUserInterface() {

        userInterface = COSAlertWindow.new();

        // Title
        userInterface.setMessageText('Font Finder');

        if (includedFontName.length == 0) {
            userInterface.setInformativeText('This page dosen\'t have any fonts.');
        } else {
            userInterface.setInformativeText('You can find and select font items.');
        }

        // Checkbox
        for (var i = 0; i < includedFontName.length; i++) {
            var checkbox = NSButton.alloc().initWithFrame(NSMakeRect( 0, i * 24, 300, 18 ));
            checkbox.setButtonType(NSSwitchButton);
            checkbox.setTitle(includedFontName[i]);
            checkbox.setState(false);
            userInterface.addAccessoryView( checkbox );
        }

        // Button

        if (includedFontName.length == 0) {
            userInterface.addButtonWithTitle('OK');
        } else {
            userInterface.addButtonWithTitle('Select');
            userInterface.addButtonWithTitle('Cancel');
        }

        return userInterface;
    }


    function processButtonClick(modal, buttonClick) {

        var result;

        if (buttonClick === SELECT) {

            // Deselect All Layers
            page.deselectAllLayers()

            for (var i = 0; i < includedFontName.length; i++) {
                if ([[[modal viewAtIndex: i] selectedCell] state] == true) {
                    selectingFontName.push([[[modal viewAtIndex: i] selectedCell] title]);
                }
            }

            // Select Font Layers
            featureSelectSpecificFontTextLayer();

            if (selectingFontName.length > 0) {
                result = READY_TO_SEARCH;
            } else {
                result = NOT_READY;
            }

        } else {
            // Cancel button pressed
            result = CANCELLED;
        }

        return result;
    }


    function featureSearchFontName () {
        switchOfSearch = 1;
        searchInLayer(page);
        includedFontName.sort();
    }


    function featureSelectSpecificFontTextLayer () {
        switchOfSearch = 2;
        searchInLayer(page);
    }


    function searchInLayer(layer) {
        // Determine the type of layer we're looking at
        switch ([layer class]) {

            // Text layer - this is the important one
            case MSTextLayer:
            if (switchOfSearch == 1) {
                showFontName(layer);
            } else if (switchOfSearch == 2) {
                selectTextLayer(layer);
            }
            break;

            // If we've started our search at the document root, loop through the pages
            case MSDocument:
            var documentPages = [layer pages];
            for (var i = 0; i < [documentPages count]; i++) {
                var documentPage = [documentPages objectAtIndex:i];
                searchInLayer(documentPage);
            }
            break;

            // Otherwise everything below that is an alias for layers anyway so we can treat them the same and loop through any sublayers
            case MSPage:
            case MSLayerGroup:
            case MSSymbolMaster:
            case MSArtboardGroup:
            var sublayers = [layer layers];
            for (var i = 0; i < [sublayers count]; i++) {
                var sublayer = [sublayers objectAtIndex: i];
                searchInLayer(sublayer);
            }
            break;
        }
    }


    function showFontName(layer) {
        var isExistFont = false;

        for (var i = 0; i < includedFontName.length; i++) {
            if (includedFontName[i] == layer.fontPostscriptName()) {
                isExistFont = true;
            }
        }

        if (!isExistFont) {
            includedFontName.push(layer.fontPostscriptName());
        }
    }


    function selectTextLayer(layer) {

        for (var i = 0; i < selectingFontName.length; i++) {
            if (layer.fontPostscriptName().match(selectingFontName[i])) {
                layer.select_byExpandingSelection(true, true);
            }
        }
    }
}
